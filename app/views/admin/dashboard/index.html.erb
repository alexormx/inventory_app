<div class="container-fluid">
  <h2 class="mb-3"><i class="fa-solid fa-chart-line"></i> Dashboard</h2>

  <!-- Filtros globales -->
  <div class="card mb-3">
    <div class="card-body py-2">
      <%= form_with url: admin_dashboard_path, method: :get, local: true, class: "row gy-2 gx-2 align-items-end" do |f| %>
        <div class="row mt-4 g-3">
          <div class="col-xl-8">
            <div class="card h-100">
              <div class="card-header d-flex justify-content-between align-items-center">
                <span><i class="fa-solid fa-globe"></i> Geographic Breakdown</span>
                <div class="btn-group btn-group-sm" role="group" aria-label="map scope">
                  <button type="button" class="btn btn-outline-secondary" data-map-scope="world">World</button>
                  <button type="button" class="btn btn-outline-secondary active" data-map-scope="mexico">Mexico</button>
                </div>
              </div>
              <div class="card-body">
                <div id="geo-map" style="height: 420px;"></div>
                <small class="text-muted">Source: Visitor Logs (accesses); Sales by region pending shipping addresses</small>
              </div>
            </div>
          </div>
          <div class="col-xl-4">
            <div class="card h-100">
              <div class="card-header"><i class="fa-solid fa-ranking-star"></i> Top Customers</div>
              <div class="card-body p-0">
                <ul class="nav nav-tabs nav-tabs-sm px-2 pt-2" role="tablist">
                  <li class="nav-item" role="presentation">
                    <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#rank-range" type="button" role="tab">This Range</button>
                  </li>
                  <li class="nav-item" role="presentation">
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#rank-all" type="button" role="tab">All Time</button>
                  </li>
                </ul>
                <div class="tab-content">
                  <div class="tab-pane fade show active" id="rank-range" role="tabpanel">
                    <div class="table-responsive">
                      <table class="table table-sm mb-0">
                        <thead><tr><th>Customer</th><th class="text-end">Orders</th><th class="text-end">Revenue</th></tr></thead>
                        <tbody>
                          <% @top_users_range.each do |u| %>
                            <tr>
                              <td><%= link_to u[:name], edit_admin_user_path(u[:user_id]) %></td>
                              <td class="text-end"><%= number_with_delimiter(u[:orders_count]) %></td>
                              <td class="text-end">$ <%= number_with_precision(u[:revenue], precision: 2, delimiter: ',') %></td>
                            </tr>
                          <% end %>
                          <% if @top_users_range.blank? %>
                            <tr><td colspan="3" class="text-center text-muted py-3">No data</td></tr>
                          <% end %>
                        </tbody>
                      </table>
                    </div>
                  </div>
                  <div class="tab-pane fade" id="rank-all" role="tabpanel">
                    <div class="table-responsive">
                      <table class="table table-sm mb-0">
                        <thead><tr><th>Customer</th><th class="text-end">Orders</th><th class="text-end">Revenue</th></tr></thead>
                        <tbody>
                          <% @top_users_all.each do |u| %>
                            <tr>
                              <td><%= link_to u[:name], edit_admin_user_path(u[:user_id]) %></td>
                              <td class="text-end"><%= number_with_delimiter(u[:orders_count]) %></td>
                              <td class="text-end">$ <%= number_with_precision(u[:revenue], precision: 2, delimiter: ',') %></td>
                            </tr>
                          <% end %>
                          <% if @top_users_all.blank? %>
                            <tr><td colspan="3" class="text-center text-muted py-3">No data</td></tr>
                          <% end %>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
          <div class="form-check mt-4">
            <%= f.check_box :exclude_canceled, { checked: @exclude_canceled, class: 'form-check-input' }, 'true', 'false' %>
            <label class="form-check-label">Excluir cancelados</label>
          </div>
        </div>
        <div class="col-auto">
          <%= f.submit 'Aplicar', class: 'btn btn-primary btn-sm' %>
          <%= link_to 'Limpiar filtros', admin_dashboard_path, class: 'btn btn-outline-secondary btn-sm' %>
        </div>
      <% end %>
    </div>
  </div>

  <div class="row mt-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <span><i class="fa-solid fa-globe"></i> Mapa mundial: accesos y ventas</span>
          <small class="text-muted">Fuente: Visitor Logs (accesos); Ventas por enviar (placeholder)</small>
        </div>
        <div class="card-body">
          <div class="row g-3">
            <div class="col-md-6">
        <!-- KPIs -->
        <div class="row g-3">
          <div class="col-md-2 col-6">
            <div class="card text-bg-light h-100">
              <div class="card-body">
                <div class="small text-muted">Productos</div>
                <div class="fs-4 fw-bold"><%= number_with_delimiter(@total_products) %></div>
              </div>
            </div>
          </div>
          <div class="col-md-2 col-6">
            <div class="card text-bg-light h-100">
              <div class="card-body">
                <div class="small text-muted">Usuarios</div>
                <div class="fs-4 fw-bold"><%= number_with_delimiter(@total_users) %></div>
              </div>
            </div>
          </div>
          <div class="col-md-2 col-6">
            <div class="card text-bg-success-subtle h-100">
              <div class="card-body">
                <div class="small text-muted">Ventas YTD</div>
                <div class="fs-5 fw-bold">$ <%= number_with_precision(@sales_ytd, precision: 2, delimiter: ',') %></div>
              </div>
            </div>
          </div>
          <div class="col-md-2 col-6">
            <div class="card text-bg-warning-subtle h-100">
              <div class="card-body">
                <div class="small text-muted">Compras YTD</div>
                <div class="fs-5 fw-bold">$ <%= number_with_precision(@purchases_ytd, precision: 2, delimiter: ',') %></div>
              </div>
            </div>
          </div>
          <div class="col-md-2 col-6">
            <div class="card text-bg-primary-subtle h-100">
              <div class="card-body">
                <div class="small text-muted">Ganancia YTD</div>
                <div class="fs-5 fw-bold">$ <%= number_with_precision(@profit_ytd, precision: 2, delimiter: ',') %></div>
              </div>
            </div>
          </div>
          <div class="col-md-2 col-6">
            <div class="card text-bg-info-subtle h-100">
              <div class="card-body">
                <div class="small text-muted">Margen YTD</div>
                <div class="fs-4 fw-bold"><%= number_to_percentage(@margin_ytd * 100, precision: 1) %></div>
              </div>
            </div>
          </div>
        </div>
              <div id="world-map-visits" style="height: 360px;"></div>
            </div>
            <div class="col-md-6">
              <h6 class="mb-2">Ventas por pa√≠s</h6>
              <div id="world-map-sales" style="height: 360px;"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- High-impact charts row 1 -->
  <div class="row mt-4 g-3">
    <div class="col-lg-8">
      <div class="card h-100">
        <div class="card-header"><i class="fa-solid fa-chart-line"></i> Sales Comparison (12 months)</div>
        <div class="card-body">
          <div id="chart-trend-12m" style="height: 280px;"></div>
        </div>
      </div>
    </div>
    <div class="col-lg-4">
      <div class="card h-100">
        <div class="card-header"><i class="fa-solid fa-chart-pie"></i> Sales by Product Category</div>
        <div class="card-body">
          <div id="chart-sales-by-category" style="height: 280px;"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- High-impact charts row 2 -->
  <div class="row mt-4 g-3">
    <div class="col-lg-8">
      <div class="card h-100">
        <div class="card-header"><i class="fa-solid fa-chart-column"></i> Sales by Month (stacked by category)</div>
        <div class="card-body">
          <div id="chart-monthly-stacked" style="height: 280px;"></div>
        </div>
      </div>
    </div>
    <div class="col-lg-4">
      <div class="card h-100">
        <div class="card-header"><i class="fa-solid fa-city"></i> Brand Profitability</div>
        <div class="card-body">
          <div id="chart-brand-profit" style="height: 280px;"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- ECharts core (local map registration will fetch GeoJSON from our domain) -->
  <script src="https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js"></script>
<script>
    // Mostrar campos de fecha solo si rango == custom
    document.addEventListener('turbo:load', () => {
      const rangeSel = document.querySelector('select[name="range"]');
      const customFields = document.querySelectorAll('[data-range-custom]');
      const sync = () => {
        const isCustom = rangeSel && rangeSel.value === 'custom';
        customFields.forEach(el => el.style.display = isCustom ? '' : 'none');
      };
      if (rangeSel) {
        rangeSel.addEventListener('change', sync);
      }
      sync();
    });

  // High-impact charts (init on Turbo load)
  document.addEventListener('turbo:load', () => {
    if (!(window.echarts)) return;
    try {
      const lineEl = document.getElementById('chart-trend-12m');
      const donutEl = document.getElementById('chart-sales-by-category');
      const stackedEl = document.getElementById('chart-monthly-stacked');
      const brandEl = document.getElementById('chart-brand-profit');

      if (lineEl) {
        const chart = echarts.init(lineEl);
        const months = <%= raw(@chart_sales_trend[:months].to_json) %>;
        const revenue = <%= raw(@chart_sales_trend[:revenue].map(&:to_f).to_json) %>;
        const cogs = <%= raw(@chart_sales_trend[:cogs].map(&:to_f).to_json) %>;
        const profit = <%= raw(@chart_sales_trend[:profit].map(&:to_f).to_json) %>;
        chart.setOption({
          tooltip: { trigger: 'axis' },
          legend: { data: ['Revenue','COGS','Profit'] },
          xAxis: { type: 'category', data: months },
          yAxis: { type: 'value' },
          series: [
            { name: 'Revenue', type: 'line', data: revenue, smooth: true },
            { name: 'COGS', type: 'line', data: cogs, smooth: true },
            { name: 'Profit', type: 'line', data: profit, smooth: true }
          ]
        });
        window.addEventListener('resize', () => chart.resize());
      }

      if (donutEl) {
        const chart = echarts.init(donutEl);
        const series = <%= raw(@chart_sales_by_category.to_json) %>;
        chart.setOption({
          tooltip: { trigger: 'item' },
          legend: { orient: 'vertical', left: 'left' },
          series: [{
            name: 'Sales by Category', type: 'pie', radius: ['40%','70%'], avoidLabelOverlap: false,
            itemStyle: { borderRadius: 6, borderColor: '#fff', borderWidth: 2 },
            label: { show: false }, emphasis: { label: { show: true, fontSize: 14, fontWeight: 'bold' } },
            labelLine: { show: false }, data: series
          }]
        });
        window.addEventListener('resize', () => chart.resize());
      }

      if (stackedEl) {
        const chart = echarts.init(stackedEl);
        const months = <%= raw(@chart_monthly_by_category[:months].to_json) %>;
        const series = <%= raw(@chart_monthly_by_category[:series].to_json) %>;
        chart.setOption({
          tooltip: { trigger: 'axis' },
          legend: {},
          xAxis: { type: 'category', data: months },
          yAxis: { type: 'value' },
          series: series.map(s => ({ ...s, type: 'bar', stack: 'total' }))
        });
        window.addEventListener('resize', () => chart.resize());
      }

      if (brandEl) {
        const chart = echarts.init(brandEl);
        const brands = <%= raw(@chart_brand_profit[:brands].to_json) %>;
        const profit = <%= raw(@chart_brand_profit[:profit].map(&:to_f).to_json) %>;
        chart.setOption({
          tooltip: { trigger: 'axis' },
          xAxis: { type: 'value' },
          yAxis: { type: 'category', data: brands },
          series: [{ type: 'bar', data: profit, itemStyle: { color: '#4caf50' } }]
        });
        window.addEventListener('resize', () => chart.resize());
      }
    } catch (e) { console.error('Charts error', e); }
  });

  document.addEventListener('turbo:load', () => {
    const geoEl = document.getElementById('geo-map');
    if (!geoEl || !(window.echarts)) return;

    Promise.resolve().then(async () => {
      const res = await fetch('<%= admin_dashboard_geo_path(format: :json) %>');
      if (!res.ok) return;
      const data = await res.json();

      const chart = echarts.init(geoEl);
      const registerLocalMap = async (name) => {
        // name: 'world' | 'mexico'
        const already = echarts.getMap(name);
        if (already) return true;
        const url = name === 'world' ? '/maps/world.json' : '/maps/mexico.json';
        try {
          const r = await fetch(url, { headers: { 'Accept': 'application/json' } });
          if (!r.ok) return false;
          const geojson = await r.json();
          echarts.registerMap(name, geojson);
          if (name === 'mexico') {
            // Register common aliases just in case
            echarts.registerMap('Mexico', geojson);
            echarts.registerMap('MX', geojson);
            echarts.registerMap('MEX', geojson);
          }
          return true;
        } catch (e) {
          console.warn('Map load failed', name, e);
          return false;
        }
      };

      const ensureMap = async (scope) => {
        if (scope === 'mexico') {
          if (echarts.getMap('mexico') || echarts.getMap('Mexico') || echarts.getMap('MX') || echarts.getMap('MEX')) return true;
          return registerLocalMap('mexico');
        }
        if (echarts.getMap('world')) return true;
        return registerLocalMap('world');
      };

      const resolveMapName = (scope) => {
        if (scope === 'mexico') {
          const candidates = ['mexico', 'Mexico', 'MX', 'MEX'];
          for (const c of candidates) { if (echarts.getMap(c)) return c; }
        }
        return echarts.getMap('world') ? 'world' : null;
      };

      const render = async (scope) => {
        let ok = await ensureMap(scope);
        let mapName = resolveMapName(scope);
        if (!ok || !mapName) {
          // Fallback to world map to avoid blank panel
          ok = await ensureMap('world');
          mapName = resolveMapName('world');
          if (!ok || !mapName) {
            console.warn('Map not available; aborting render');
            geoEl.innerHTML = '<div class="text-muted">Map data unavailable</div>';
            return;
          }
        }
        const seriesData = (data.visits || []).map(d => ({ name: d.name, value: d.value }));
        chart.setOption({
          tooltip: { trigger: 'item', formatter: ({name, value}) => `${name}: ${value?.toLocaleString?.() || value || 0}` },
          visualMap: { min: 0, max: Math.max(10, Math.max(...seriesData.map(d => d.value || 0))), left: 'left', bottom: 10, calculable: true },
          series: [{
            type: 'map',
            name: 'Visits',
            map: mapName,
            roam: true,
            emphasis: { label: { show: false } },
            data: seriesData
          }]
        });
      };

  // initial: use active button scope, default to 'mexico'
  const activeBtn = document.querySelector('[data-map-scope].active');
  const initialScope = activeBtn ? activeBtn.getAttribute('data-map-scope') : 'mexico';
  render(initialScope);
      // toggle buttons
      document.querySelectorAll('[data-map-scope]').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          document.querySelectorAll('[data-map-scope]').forEach(b => b.classList.remove('active'));
          btn.classList.add('active');
          render(btn.getAttribute('data-map-scope'));
        });
      });
      window.addEventListener('resize', () => chart.resize());
    });
  });
</script>
